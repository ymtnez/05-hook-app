{"ast":null,"code":"/** * \r\n * Puede definirse asi tambien, aunque la podemos simplificar mas pues getImagenPromesa\r\n * solo tiene un return por lo que podemos convertirla en una funcion con return implicito \r\n    const getImagenPromesa = () => {\r\n        const promesa = new Promise( (resolve, reject) => {\r\n            resolve('https://jdfsdfjsdlfjd.com');\r\n        })\r\n        \r\n        return promesa;\r\n    }\r\n    const getImagenPromesa = () => new Promise( (resolve, reject) => resolve('https://lolo.papo.com') )\r\n    getImagenPromesa().then(console.log);\r\n    //Puede ser asi tambien\r\n    //getImagenPromesa().then(url => console.log('Esta es la url:', url));\r\n*/\n\n/**\r\n * Este codigo de ejemplo es una funcion sincrona, es decir no utilizamos promesas, etc.\r\n * pero lo podemos covertir en una promesa como en el ejemplo siguiente\r\n        const getImagen = () => {\r\n            \r\n            return 'https://popo.lelo.com';\r\n        }\r\n\r\n        console.log(getImagen());\r\n*/\n\n/**\r\n * Al utilizar async convertimos lo que antes fue una funcion sincrona en una promesa.\r\n * El async puede trabajar solo o independiente y es muy útil cuando queremos que una \r\n * funcion devuelva una promesa en su return; pero el await NO (siempre depende de\r\n * que esté dentro de un async). Al usar await nos permite trabajar todo el codigo \r\n * como si fuera sincrono.   \r\n */\nconst getImagen = async () => {\n  const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\n  /**\r\n   * fetch es una funcion que devuelve una Promesa que resuelve una >Response> y por\r\n   * ello el codigo se ejucta de manera asincrona. Pero al utilizar await le estamos\r\n   * diciendo al codigo que no ejecute las lineas siquientes hasta que no se ejecute\r\n   * la linea donde esta await. Ejemplo:\r\n   *    const peticion = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\r\n   *    ???\r\n   * No se va a ejecutar ??? hasta que la promesa que devuelva fetch se ejecute.\r\n   */\n\n  const resp = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n  const {\n    data\n  } = await resp.json();\n  const {\n    url\n  } = data.images.original;\n  const imagen = document.createElement('img');\n  imagen.src = url;\n  document.body.append(imagen);\n  console.log(url);\n};\n\ngetImagen(); // peticion\n//     .then( (resp) => resp.json())//En este caso hacemos un return implicito\n//     .then( ({data}) => {\n//         const {url} = data.images.original;\n//         const imagen = document.createElement('img');\n//         imagen.src   = url;\n//         document.body.append(imagen);        \n//     })\n//     .catch(err => console.warn('UPssss!!!', err));","map":{"version":3,"names":["getImagen","apiKey","resp","fetch","data","json","url","images","original","imagen","document","createElement","src","body","append","console","log"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/index.js"],"sourcesContent":["/** * \r\n * Puede definirse asi tambien, aunque la podemos simplificar mas pues getImagenPromesa\r\n * solo tiene un return por lo que podemos convertirla en una funcion con return implicito \r\n    const getImagenPromesa = () => {\r\n        const promesa = new Promise( (resolve, reject) => {\r\n            resolve('https://jdfsdfjsdlfjd.com');\r\n        })\r\n        \r\n        return promesa;\r\n    }\r\n    const getImagenPromesa = () => new Promise( (resolve, reject) => resolve('https://lolo.papo.com') )\r\n    getImagenPromesa().then(console.log);\r\n    //Puede ser asi tambien\r\n    //getImagenPromesa().then(url => console.log('Esta es la url:', url));\r\n*/\r\n\r\n/**\r\n * Este codigo de ejemplo es una funcion sincrona, es decir no utilizamos promesas, etc.\r\n * pero lo podemos covertir en una promesa como en el ejemplo siguiente\r\n        const getImagen = () => {\r\n            \r\n            return 'https://popo.lelo.com';\r\n        }\r\n\r\n        console.log(getImagen());\r\n*/\r\n\r\n/**\r\n * Al utilizar async convertimos lo que antes fue una funcion sincrona en una promesa.\r\n * El async puede trabajar solo o independiente y es muy útil cuando queremos que una \r\n * funcion devuelva una promesa en su return; pero el await NO (siempre depende de\r\n * que esté dentro de un async). Al usar await nos permite trabajar todo el codigo \r\n * como si fuera sincrono.   \r\n */\r\nconst getImagen = async() => {\r\n\r\n    const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\r\n    /**\r\n     * fetch es una funcion que devuelve una Promesa que resuelve una >Response> y por\r\n     * ello el codigo se ejucta de manera asincrona. Pero al utilizar await le estamos\r\n     * diciendo al codigo que no ejecute las lineas siquientes hasta que no se ejecute\r\n     * la linea donde esta await. Ejemplo:\r\n     *    const peticion = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\r\n     *    ???\r\n     * No se va a ejecutar ??? hasta que la promesa que devuelva fetch se ejecute.\r\n     */\r\n    const resp = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\r\n    const {data} = await resp.json();\r\n\r\n    const {url} = data.images.original;\r\n\r\n    const imagen = document.createElement('img');\r\n    imagen.src   = url;\r\n    document.body.append(imagen)\r\n\r\n    console.log(url);\r\n}\r\n\r\ngetImagen();\r\n\r\n// peticion\r\n//     .then( (resp) => resp.json())//En este caso hacemos un return implicito\r\n//     .then( ({data}) => {\r\n//         const {url} = data.images.original;\r\n\r\n//         const imagen = document.createElement('img');\r\n//         imagen.src   = url;\r\n//         document.body.append(imagen);        \r\n//     })\r\n//     .catch(err => console.warn('UPssss!!!', err));"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAG,YAAW;EAEzB,MAAMC,MAAM,GAAG,kCAAf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,gDAA+CF,MAAO,EAAxD,CAAxB;EACA,MAAM;IAACG;EAAD,IAAS,MAAMF,IAAI,CAACG,IAAL,EAArB;EAEA,MAAM;IAACC;EAAD,IAAQF,IAAI,CAACG,MAAL,CAAYC,QAA1B;EAEA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAf;EACAF,MAAM,CAACG,GAAP,GAAeN,GAAf;EACAI,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqBL,MAArB;EAEAM,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACH,CAtBD;;AAwBAN,SAAS,G,CAET;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}