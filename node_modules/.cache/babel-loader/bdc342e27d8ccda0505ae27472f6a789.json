{"ast":null,"code":"//Promesas\nimport { getHeroeById } from './bases/08-imp-exp'; // const promesa = new Promise ( (resolve, reject) => {\n//   setTimeout( () => {\n//     const my_heroe = getHeroeById (2);\n//     //console.log(my_heroe); \n//     /**\n//     * Una vez encontrado my_heroe lo mandamos al resolve como argumento,\n//     * de esta manera podemos acceder a lo que tenga my_heroe en promesa.then\n//     */\n//     resolve(my_heroe);\n//      /**\n//       * Si no encuentra my_heroe entonces utilizamos reject para manejar el \n//       * error. Reject se utiliza cuando la promesa no se cumple. Para ello\n//       * debemos utilizar el metodo catch en el then para manejar el error. \n//       */\n//      //reject ('No se pudo encontrar el heroe')\n//   }, 2000)\n// });\n// promesa.then ( (heroe) =>{\n//   console.log('El heroe es:', heroe);\n// }).catch ( err => console.warn (err) );\n\n/**\r\n * De esta forma podemos enviar a la promesa un argumento, es decir, el id\r\n * del heroe que quiero buscar.\r\n */\n\nconst getHeroeByIdAsync = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const my_heroe = getHeroeById(id); //console.log(my_heroe); \n\n      /**\r\n      * Una vez encontrado my_heroe lo mandamos al resolve como argumento,\r\n      * de esta manera podemos acceder a lo que tenga my_heroe en promesa.then\r\n      */\n\n      resolve(my_heroe);\n      /**\r\n       * Si no encuentra el heroe entonces utilizamos reject para manejar el \r\n       * error. Reject se utiliza cuando la promesa no se cumple. Para ello\r\n       * debemos utilizar el metodo catch en el then para manejar el error. \r\n       */\n      //reject ('No se pudo encontrar el heroe')\n    }, 2000);\n  });\n};\n\ngetHeroeByIdAsync(10).then(my_heroe => console.log('Mi heroe', my_heroe));","map":{"version":3,"names":["getHeroeById","getHeroeByIdAsync","id","Promise","resolve","reject","setTimeout","my_heroe","then","console","log"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/index.js"],"sourcesContent":["//Promesas\r\n\r\nimport {getHeroeById} from './bases/08-imp-exp'\r\n\r\n// const promesa = new Promise ( (resolve, reject) => {\r\n//   setTimeout( () => {\r\n//     const my_heroe = getHeroeById (2);\r\n//     //console.log(my_heroe); \r\n\r\n//     /**\r\n//     * Una vez encontrado my_heroe lo mandamos al resolve como argumento,\r\n//     * de esta manera podemos acceder a lo que tenga my_heroe en promesa.then\r\n//     */\r\n//     resolve(my_heroe);\r\n//      /**\r\n//       * Si no encuentra my_heroe entonces utilizamos reject para manejar el \r\n//       * error. Reject se utiliza cuando la promesa no se cumple. Para ello\r\n//       * debemos utilizar el metodo catch en el then para manejar el error. \r\n//       */\r\n//      //reject ('No se pudo encontrar el heroe')\r\n//   }, 2000)\r\n  \r\n// });\r\n\r\n// promesa.then ( (heroe) =>{\r\n//   console.log('El heroe es:', heroe);\r\n// }).catch ( err => console.warn (err) );\r\n\r\n/**\r\n * De esta forma podemos enviar a la promesa un argumento, es decir, el id\r\n * del heroe que quiero buscar.\r\n */\r\nconst getHeroeByIdAsync = ( id ) => {\r\n    return new Promise ( (resolve, reject) => {\r\n        setTimeout( () => {\r\n          const my_heroe = getHeroeById (id);\r\n          //console.log(my_heroe); \r\n      \r\n          /**\r\n          * Una vez encontrado my_heroe lo mandamos al resolve como argumento,\r\n          * de esta manera podemos acceder a lo que tenga my_heroe en promesa.then\r\n          */\r\n          resolve(my_heroe);\r\n           /**\r\n            * Si no encuentra el heroe entonces utilizamos reject para manejar el \r\n            * error. Reject se utiliza cuando la promesa no se cumple. Para ello\r\n            * debemos utilizar el metodo catch en el then para manejar el error. \r\n            */\r\n           //reject ('No se pudo encontrar el heroe')\r\n        }, 2000)\r\n        \r\n      });\r\n}\r\n\r\ngetHeroeByIdAsync(10)\r\n    .then ( my_heroe => console.log('Mi heroe', my_heroe) );"],"mappings":"AAAA;AAEA,SAAQA,YAAR,QAA2B,oBAA3B,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAKC,EAAF,IAAU;EAChC,OAAO,IAAIC,OAAJ,CAAc,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCC,UAAU,CAAE,MAAM;MAChB,MAAMC,QAAQ,GAAGP,YAAY,CAAEE,EAAF,CAA7B,CADgB,CAEhB;;MAEA;AACV;AACA;AACA;;MACUE,OAAO,CAACG,QAAD,CAAP;MACC;AACX;AACA;AACA;AACA;MACW;IACF,CAfS,EAeP,IAfO,CAAV;EAiBD,CAlBI,CAAP;AAmBH,CApBD;;AAsBAN,iBAAiB,CAAC,EAAD,CAAjB,CACKO,IADL,CACYD,QAAQ,IAAIE,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAxB,CADxB"},"metadata":{},"sourceType":"module"}