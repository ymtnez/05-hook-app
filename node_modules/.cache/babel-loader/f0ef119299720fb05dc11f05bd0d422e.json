{"ast":null,"code":"const getImagen = async () => {\n  /**\n   * fetch es una funcion que devuelve una Promesa que resuelve una <Response> y por\n   * ello el codigo se ejucta de manera asincrona. Pero al utilizar await le estamos\n   * diciendo al codigo que no ejecute las lineas siquientes hasta que no se ejecute\n   * la linea donde esta await. Ejemplo:\n   *    const peticion = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n   *    ???\n   * No se va a ejecutar ??? hasta que la promesa que devuelva fetch se ejecute.\n   * Otra cosa importante es que paara manejar un error en async_await hay que utilizar\n   * try y el catch\n   * \n  */\n  try {\n    const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\n    const resp = await fetch(`http://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n    const {\n      data\n    } = await resp.json();\n    const {\n      url\n    } = data.images.original;\n    const imagen = document.createElement('img');\n    imagen.src = url;\n    document.body.append(imagen);\n  } catch (error) {\n    //manejo el error\n    console.error('UPss!!!', error); //O console.error(error); \n  }\n};\n\ngetImagen();","map":{"version":3,"names":["getImagen","apiKey","resp","fetch","data","json","url","images","original","imagen","document","createElement","src","body","append","error","console"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/index.js"],"sourcesContent":[" const getImagen = async() => {\n\n    /**\n     * fetch es una funcion que devuelve una Promesa que resuelve una <Response> y por\n     * ello el codigo se ejucta de manera asincrona. Pero al utilizar await le estamos\n     * diciendo al codigo que no ejecute las lineas siquientes hasta que no se ejecute\n     * la linea donde esta await. Ejemplo:\n     *    const peticion = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n     *    ???\n     * No se va a ejecutar ??? hasta que la promesa que devuelva fetch se ejecute.\n     * Otra cosa importante es que paara manejar un error en async_await hay que utilizar\n     * try y el catch\n     * \n    */\n   try {\n       \n        const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\n        const resp = await fetch(`http://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n        const {data} = await resp.json();\n    \n        const {url} = data.images.original;\n    \n        const imagen = document.createElement('img');\n        imagen.src   = url;\n        document.body.append(imagen);\n\n    } catch (error) {\n        //manejo el error\n        console.error('UPss!!!', error); //O console.error(error); \n    }\n}\n\ngetImagen();\n"],"mappings":"AAAC,MAAMA,SAAS,GAAG,YAAW;EAE1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACG,IAAI;IAEC,MAAMC,MAAM,GAAG,kCAAf;IACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,+CAA8CF,MAAO,EAAvD,CAAxB;IACA,MAAM;MAACG;IAAD,IAAS,MAAMF,IAAI,CAACG,IAAL,EAArB;IAEA,MAAM;MAACC;IAAD,IAAQF,IAAI,CAACG,MAAL,CAAYC,QAA1B;IAEA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAf;IACAF,MAAM,CAACG,GAAP,GAAeN,GAAf;IACAI,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqBL,MAArB;EAEH,CAZF,CAYG,OAAOM,KAAP,EAAc;IACZ;IACAC,OAAO,CAACD,KAAR,CAAc,SAAd,EAAyBA,KAAzB,EAFY,CAEqB;EACpC;AACJ,CA9BA;;AAgCDf,SAAS"},"metadata":{},"sourceType":"module"}