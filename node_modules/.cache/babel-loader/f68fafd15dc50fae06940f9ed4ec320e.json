{"ast":null,"code":"const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\n/**\r\n * El fetch es una promesa y como tal se maneja de la misma manera, por lo\r\n * que tiene un then, finally y catch. A ella retorna siempre algo.\r\n */\n\nconst peticion = fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n/**\r\n * En este caso peticion es una promesa y puedo accedr a los metodos then, finally\r\n * y catch. El resultado de fetch lo guardo en respuesta.\r\n * A su vez el metodo json es en si una promesa\r\n * \r\n    peticion.then ( (respuesta) => {\r\n        respuesta.json().then( (datos) => {\r\n            console.log(datos.data.images.original.url);\r\n        })\r\n    })\r\n*/\n\npeticion.then(resp => {\n  resp.json().then(datos_json => {\n    const {\n      data: {\n        images: {\n          original\n        }\n      }\n    } = datos_json;\n    const url = original.url;\n    /**\r\n     * Primero creo el elemento imagen que en html es una img, luego al atributo\r\n     * src (source) de img le asigno el valor de la constante url (la extraje de\r\n     * la desestructuracion del objeto data {data:{images:{original}}}), finalmente\r\n     * ubicamos imagen (de tipo img en HTML) en el body\r\n     */\n\n    const imagen = document.createElement('img');\n    imagen.src = url;\n    document.body.append(imagen);\n  });\n});","map":{"version":3,"names":["apiKey","peticion","fetch","then","resp","json","datos_json","data","images","original","url","imagen","document","createElement","src","body","append"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/index.js"],"sourcesContent":["const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\r\n\r\n/**\r\n * El fetch es una promesa y como tal se maneja de la misma manera, por lo\r\n * que tiene un then, finally y catch. A ella retorna siempre algo.\r\n */\r\nconst peticion = fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\r\n\r\n/**\r\n * En este caso peticion es una promesa y puedo accedr a los metodos then, finally\r\n * y catch. El resultado de fetch lo guardo en respuesta.\r\n * A su vez el metodo json es en si una promesa\r\n * \r\n    peticion.then ( (respuesta) => {\r\n        respuesta.json().then( (datos) => {\r\n            console.log(datos.data.images.original.url);\r\n        })\r\n    })\r\n*/\r\npeticion.then( (resp) => {\r\n    resp.json().then( (datos_json) => {\r\n        const {data:{images:{original}}} = datos_json;\r\n        const url = original.url;\r\n        \r\n        /**\r\n         * Primero creo el elemento imagen que en html es una img, luego al atributo\r\n         * src (source) de img le asigno el valor de la constante url (la extraje de\r\n         * la desestructuracion del objeto data {data:{images:{original}}}), finalmente\r\n         * ubicamos imagen (de tipo img en HTML) en el body\r\n         */\r\n        const imagen = document.createElement('img');\r\n        imagen.src = url;\r\n\r\n        document.body.append(imagen);\r\n    })\r\n});\r\n\r\n\r\n    \r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,kCAAf;AAEA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGC,KAAK,CAAE,gDAA+CF,MAAO,EAAxD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,QAAQ,CAACE,IAAT,CAAgBC,IAAD,IAAU;EACrBA,IAAI,CAACC,IAAL,GAAYF,IAAZ,CAAmBG,UAAD,IAAgB;IAC9B,MAAM;MAACC,IAAI,EAAC;QAACC,MAAM,EAAC;UAACC;QAAD;MAAR;IAAN,IAA6BH,UAAnC;IACA,MAAMI,GAAG,GAAGD,QAAQ,CAACC,GAArB;IAEA;AACR;AACA;AACA;AACA;AACA;;IACQ,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAf;IACAF,MAAM,CAACG,GAAP,GAAaJ,GAAb;IAEAE,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqBL,MAArB;EACH,CAdD;AAeH,CAhBD"},"metadata":{},"sourceType":"module"}