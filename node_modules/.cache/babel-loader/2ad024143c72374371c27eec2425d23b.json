{"ast":null,"code":"import { getHeroeById } from './bases/08-imp-exp';\n\nconst getHeroeByIdAsync = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const my_heroe = getHeroeById(id); //console.log(my_heroe); \n\n      /**\r\n      * Una vez encontrado my_heroe lo mandamos al resolve como argumento,\r\n      * de esta manera podemos acceder a lo que tenga my_heroe en promesa.then\r\n      */\n\n      if (my_heroe) {\n        const {\n          name\n        } = my_heroe;\n        resolve(name);\n      } else reject('No se pudo encontrar el heroe');\n      /**\r\n       * Si no encuentra my_heroe entonces utilizamos reject para manejar el \r\n       * error. Reject se utiliza cuando la promesa no se cumple. Para ello\r\n       * debemos utilizar el metodo catch en el then para manejar el error. \r\n       */\n      //reject ('No se pudo encontrar el heroe')\n\n    }, 2000);\n  });\n};\n\ngetHeroeByIdAsync(1).then(nombre => console.log('Mi heroe', my_heroe)) // igual .then ( console.log )\n.catch(console.warn); // igual .catch (err => console.warn (err))","map":{"version":3,"names":["getHeroeById","getHeroeByIdAsync","id","Promise","resolve","reject","setTimeout","my_heroe","name","then","nombre","console","log","catch","warn"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/index.js"],"sourcesContent":["\r\nimport {getHeroeById} from './bases/08-imp-exp'\r\n\r\nconst getHeroeByIdAsync = ( id ) => {\r\n    return new Promise ( (resolve, reject) => {\r\n        setTimeout( () => {\r\n          const my_heroe = getHeroeById (id);\r\n          //console.log(my_heroe); \r\n      \r\n          /**\r\n          * Una vez encontrado my_heroe lo mandamos al resolve como argumento,\r\n          * de esta manera podemos acceder a lo que tenga my_heroe en promesa.then\r\n          */\r\n        if ( my_heroe ){\r\n            const {name} = my_heroe;\r\n            resolve(name);\r\n        }\r\n        else\r\n            reject('No se pudo encontrar el heroe');\r\n           /**\r\n            * Si no encuentra my_heroe entonces utilizamos reject para manejar el \r\n            * error. Reject se utiliza cuando la promesa no se cumple. Para ello\r\n            * debemos utilizar el metodo catch en el then para manejar el error. \r\n            */\r\n           //reject ('No se pudo encontrar el heroe')\r\n        }, 2000)\r\n        \r\n      });\r\n}\r\n\r\ngetHeroeByIdAsync(1)\r\n    .then ( nombre => console.log('Mi heroe', my_heroe) )// igual .then ( console.log )\r\n    .catch (console.warn ); // igual .catch (err => console.warn (err)) "],"mappings":"AACA,SAAQA,YAAR,QAA2B,oBAA3B;;AAEA,MAAMC,iBAAiB,GAAKC,EAAF,IAAU;EAChC,OAAO,IAAIC,OAAJ,CAAc,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCC,UAAU,CAAE,MAAM;MAChB,MAAMC,QAAQ,GAAGP,YAAY,CAAEE,EAAF,CAA7B,CADgB,CAEhB;;MAEA;AACV;AACA;AACA;;MACQ,IAAKK,QAAL,EAAe;QACX,MAAM;UAACC;QAAD,IAASD,QAAf;QACAH,OAAO,CAACI,IAAD,CAAP;MACH,CAHD,MAKIH,MAAM,CAAC,+BAAD,CAAN;MACD;AACX;AACA;AACA;AACA;MACW;;IACF,CApBS,EAoBP,IApBO,CAAV;EAsBD,CAvBI,CAAP;AAwBH,CAzBD;;AA2BAJ,iBAAiB,CAAC,CAAD,CAAjB,CACKQ,IADL,CACYC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB,CADtB,EACyD;AADzD,CAEKM,KAFL,CAEYF,OAAO,CAACG,IAFpB,E,CAE4B"},"metadata":{},"sourceType":"module"}