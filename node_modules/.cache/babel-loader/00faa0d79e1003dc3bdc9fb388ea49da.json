{"ast":null,"code":"const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\n/**\r\n * El fetch es una promesa y como tal se maneja de la misma manera, por lo\r\n * que tiene un then, finally y catch. A ella retorna siempre algo.\r\n */\n\nconst peticion = fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\n/**\r\n * En este caso peticion es una promesa y puedo accedr a los metodos then, finally\r\n * y catch. El resultado de fetch lo guardo en respuesta.\r\n * A su vez el metodo json es en si una promesa\r\n * \r\n    peticion.then ( (respuesta) => {\r\n        respuesta.json().then( (datos) => {\r\n            console.log(datos.data.images.original.url);\r\n        })\r\n    })\r\n*/\n\npeticion.then(resp => {\n  console.log(resp);\n});","map":{"version":3,"names":["apiKey","peticion","fetch","then","resp","console","log"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/index.js"],"sourcesContent":["const apiKey = '83i7O10QCBh6UcA8OfZ2Bn9UJPR4f356';\r\n\r\n/**\r\n * El fetch es una promesa y como tal se maneja de la misma manera, por lo\r\n * que tiene un then, finally y catch. A ella retorna siempre algo.\r\n */\r\nconst peticion = fetch(`https://api.giphy.com/v1/gifs/random?api_key=${apiKey}`);\r\n\r\n/**\r\n * En este caso peticion es una promesa y puedo accedr a los metodos then, finally\r\n * y catch. El resultado de fetch lo guardo en respuesta.\r\n * A su vez el metodo json es en si una promesa\r\n * \r\n    peticion.then ( (respuesta) => {\r\n        respuesta.json().then( (datos) => {\r\n            console.log(datos.data.images.original.url);\r\n        })\r\n    })\r\n*/\r\npeticion.then( (resp) => {\r\n    console.log(resp);\r\n} )\r\n    \r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,kCAAf;AAEA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGC,KAAK,CAAE,gDAA+CF,MAAO,EAAxD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,QAAQ,CAACE,IAAT,CAAgBC,IAAD,IAAU;EACrBC,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,CAFD"},"metadata":{},"sourceType":"module"}