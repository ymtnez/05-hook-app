{"ast":null,"code":"/**\r\n * Para importar archivos .js en nuestro index podemos\r\n * utilizar import {} from ''; donde import indica que \r\n * vamos a importar algo hacia nuestro archivo (en este caso\r\n * index.js), las llaves indican el contenido que vamos a\r\n * importar del archivo indicado entre comillas despues del\r\n * from. Es decir, del archivo heroes.js que esta en /data\r\n * vamos a importar el arreglo heroes indicado entre las \r\n * llaves.\r\n */\nimport { heroes, arrPrueba } from '../data/heroes';\n/**\r\n * Se pueden hacer multiples exportaciones y ademas exportaciones\r\n * por defecto, cada caso estara enlazado numericamente en heroes.js\r\n * Casos:\r\n * 1-) Exportacion por defecto\r\n *      import heroes from './data/heroes';\r\n * Nota: En esta caso se le quitan las llaves a heroes.\r\n * 2-) Exportacion por defecto\r\n *      import heroes from './data/heroes'; \r\n * 3-) Exportacion mixta (una simple y una por default)\r\n *      import heroes, {arrPrueba} from './data/heroes';\r\n * Nota: En este caso arrPrueba es una exportacion simple y heroes\r\n * es por default, es por ello que arrPrueba va entre llaves\r\n * pues es como si estuvieramos desestructurando a herose,js\r\n * 4-) Exportacion mixta (una simple y una por default)\r\n *      import heroes, {arrPrueba} from './data/heroes';\r\n * 5-) Varias exportaciones simples\r\n *      import {heroes, arrPrueba} from './data/heroes';\r\n * Nota: En este caso solo hay exportaciones simples y es por\r\n * ello que ambas va entre llaves pues es como si estuvieramos\r\n * desestructurando a herose,js\r\n */\n\n/**\r\n * Si queremos utilizar las bondades de VSCode podemos\r\n * escribir la palabra:\r\n * 1-) imp + Enter\r\n * 2-) Llenar presionando Tab los valores first y second.\r\n    import second from 'first' -> import {heroes} from './data/heroes';\r\n * \r\n * Otra forma seria escribir el nombre de nuestro archivo\r\n * heroes y si aparece entonces le damos Enter y el VSCode\r\n * lo completaria por nosotros quedando asi:\r\n *    import { heroes } from \"./data/heroes\";\r\n */\n\n/**\r\n * Pero para ver el contenido del arreglo definido en \r\n * /data/heroes.js debemos anteponer la palabra reservada:\r\n * export a la const heroes[...] de lo contrario me saldria\r\n * undefined.\r\n */\n//console.log(heroes);\n//console.log(arrPrueba);\n\n/**\r\n * La funcion getHeroeById retorna el resultado de la \r\n * funcion find en el arreglo heroes. El find recibe una\r\n * funcion como argumento conocida como callback y en la misma\r\n * se define un argumento (heroe) en el cual se va a devolver\r\n * cada uno de los elementos del array en cada iteracion que \r\n * haga la funcion callback, es asi como puedo hacer heroe.id\r\n * La funcion find devuelve el valor del primer elemento del\r\n * array que cumple la función de prueba proporcionada, en este\r\n * caso (heroe) => heroe.id === idValue.\r\n *  \r\n */\n\nexport const getHeroeById = idValue => {\n  return heroes.find(heroe => heroe.id === idValue);\n}; //console.log(getHeroeById (2));\n\n/**\r\n * La funcion getHeroeByOwner retorna el resultado de la \r\n * funcion filter en el arreglo heroes. El filter recibe una\r\n * funcion como argumento conocida como callback y en la misma\r\n * se define un argumento (heroe1) en el cual se va a devolver\r\n * cada uno de los elementos del array en cada iteracion que \r\n * haga la funcion callback, es asi como puedo hacer heroe.id\r\n * La funcion filter crea un nuevo array con todos los elementos\r\n * que cumplan la condición implementada por la función dada.\r\n */\n\nexport const getHeroeByOwner = ownerValue => {\n  return heroes.filter(heroe1 => heroe1.owner === ownerValue);\n}; //console.log(getHeroeByOwner ('DC'));","map":{"version":3,"names":["heroes","arrPrueba","getHeroeById","idValue","find","heroe","id","getHeroeByOwner","ownerValue","filter","heroe1","owner"],"sources":["/media/ymtnez/AdminFile/Personal/Desarrollo/Ejemplos/react/02-intro-javascript/src/bases/08-imp-exp.js"],"sourcesContent":["/**\r\n * Para importar archivos .js en nuestro index podemos\r\n * utilizar import {} from ''; donde import indica que \r\n * vamos a importar algo hacia nuestro archivo (en este caso\r\n * index.js), las llaves indican el contenido que vamos a\r\n * importar del archivo indicado entre comillas despues del\r\n * from. Es decir, del archivo heroes.js que esta en /data\r\n * vamos a importar el arreglo heroes indicado entre las \r\n * llaves.\r\n */\r\n\r\nimport {heroes, arrPrueba} from '../data/heroes';\r\n\r\n/**\r\n * Se pueden hacer multiples exportaciones y ademas exportaciones\r\n * por defecto, cada caso estara enlazado numericamente en heroes.js\r\n * Casos:\r\n * 1-) Exportacion por defecto\r\n *      import heroes from './data/heroes';\r\n * Nota: En esta caso se le quitan las llaves a heroes.\r\n * 2-) Exportacion por defecto\r\n *      import heroes from './data/heroes'; \r\n * 3-) Exportacion mixta (una simple y una por default)\r\n *      import heroes, {arrPrueba} from './data/heroes';\r\n * Nota: En este caso arrPrueba es una exportacion simple y heroes\r\n * es por default, es por ello que arrPrueba va entre llaves\r\n * pues es como si estuvieramos desestructurando a herose,js\r\n * 4-) Exportacion mixta (una simple y una por default)\r\n *      import heroes, {arrPrueba} from './data/heroes';\r\n * 5-) Varias exportaciones simples\r\n *      import {heroes, arrPrueba} from './data/heroes';\r\n * Nota: En este caso solo hay exportaciones simples y es por\r\n * ello que ambas va entre llaves pues es como si estuvieramos\r\n * desestructurando a herose,js\r\n */\r\n\r\n/**\r\n * Si queremos utilizar las bondades de VSCode podemos\r\n * escribir la palabra:\r\n * 1-) imp + Enter\r\n * 2-) Llenar presionando Tab los valores first y second.\r\n    import second from 'first' -> import {heroes} from './data/heroes';\r\n * \r\n * Otra forma seria escribir el nombre de nuestro archivo\r\n * heroes y si aparece entonces le damos Enter y el VSCode\r\n * lo completaria por nosotros quedando asi:\r\n *    import { heroes } from \"./data/heroes\";\r\n */\r\n\r\n/**\r\n * Pero para ver el contenido del arreglo definido en \r\n * /data/heroes.js debemos anteponer la palabra reservada:\r\n * export a la const heroes[...] de lo contrario me saldria\r\n * undefined.\r\n */\r\n//console.log(heroes);\r\n//console.log(arrPrueba);\r\n\r\n/**\r\n * La funcion getHeroeById retorna el resultado de la \r\n * funcion find en el arreglo heroes. El find recibe una\r\n * funcion como argumento conocida como callback y en la misma\r\n * se define un argumento (heroe) en el cual se va a devolver\r\n * cada uno de los elementos del array en cada iteracion que \r\n * haga la funcion callback, es asi como puedo hacer heroe.id\r\n * La funcion find devuelve el valor del primer elemento del\r\n * array que cumple la función de prueba proporcionada, en este\r\n * caso (heroe) => heroe.id === idValue.\r\n *  \r\n */\r\nexport const getHeroeById = (idValue) => {\r\n  return heroes.find( (heroe) => heroe.id === idValue );\r\n}\r\n\r\n//console.log(getHeroeById (2));\r\n\r\n/**\r\n * La funcion getHeroeByOwner retorna el resultado de la \r\n * funcion filter en el arreglo heroes. El filter recibe una\r\n * funcion como argumento conocida como callback y en la misma\r\n * se define un argumento (heroe1) en el cual se va a devolver\r\n * cada uno de los elementos del array en cada iteracion que \r\n * haga la funcion callback, es asi como puedo hacer heroe.id\r\n * La funcion filter crea un nuevo array con todos los elementos\r\n * que cumplan la condición implementada por la función dada.\r\n */\r\n\r\nexport const getHeroeByOwner = (ownerValue) => {\r\n  return heroes.filter ( (heroe1) => heroe1.owner === ownerValue );\r\n};\r\n\r\n//console.log(getHeroeByOwner ('DC'));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,EAAgBC,SAAhB,QAAgC,gBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAa;EACvC,OAAOH,MAAM,CAACI,IAAP,CAAcC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OAArC,CAAP;AACD,CAFM,C,CAIP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,eAAe,GAAIC,UAAD,IAAgB;EAC7C,OAAOR,MAAM,CAACS,MAAP,CAAiBC,MAAD,IAAYA,MAAM,CAACC,KAAP,KAAiBH,UAA7C,CAAP;AACD,CAFM,C,CAIP"},"metadata":{},"sourceType":"module"}